import os
import logging
from collections import defaultdict
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
import sqlite3

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('photo_stats.db', check_same_thread=False)
cursor = conn.cursor()

# –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ chat_id, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
cursor.execute('PRAGMA table_info(photos)')
columns = cursor.fetchall()
column_names = [col[1] for col in columns]

if 'chat_id' not in column_names:
    logger.info("–î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü chat_id –≤ —Ç–∞–±–ª–∏—Ü—É photos")
    cursor.execute('ALTER TABLE photos ADD COLUMN chat_id INTEGER')
    conn.commit()

# –§–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –±—ã–ª–∞ –ª–∏ –∫–æ–º–∞–Ω–¥–∞ /start –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
start_executed = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞
PERIOD_REQUEST = 0


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in start_executed:
        start_executed[chat_id] = False

    try:
        if not start_executed[chat_id]:
            await update.message.reply_text(
                "–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ."
            )
            start_executed[chat_id] = True
        else:
            await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /start")


async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        chat_id = update.effective_chat.id
        user = update.message.from_user
        if user.is_bot:
            return

        cursor.execute(
            'INSERT INTO photos (chat_id, user_id, timestamp) VALUES (?, ?, ?)',
            (chat_id, user.id, int(datetime.now().timestamp()))
        )
        conn.commit()
        logger.info(f"–§–æ—Ç–æ –æ—Ç {user.full_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –≤ —á–∞—Ç–µ {chat_id}: {e}")


async def show_top(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ –¥–Ω—è—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
    return PERIOD_REQUEST


async def process_period(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        chat_id = update.effective_chat.id
        period_days = int(update.message.text)
        if period_days <= 0:
            await update.message.reply_text("–ü–µ—Ä–∏–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –¥–Ω–µ–π")
            return PERIOD_REQUEST

        time_threshold = int((datetime.now() - timedelta(days=period_days)).timestamp())

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î –¥–ª—è –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
        cursor.execute('''
            SELECT user_id, COUNT(*) as count 
            FROM photos 
            WHERE chat_id = ? AND timestamp >= ? 
            GROUP BY user_id 
            ORDER BY count DESC 
            LIMIT 5
        ''', (chat_id, time_threshold))

        top_users = cursor.fetchall()
        if not top_users:
            await update.message.reply_text(f"üì≠ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {period_days} –¥–Ω–µ–π —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å")
            return ConversationHandler.END

        response = [f"üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞ {period_days} –¥–Ω–µ–π:"]
        for idx, (user_id, count) in enumerate(top_users, 1):
            try:
                user = await context.bot.get_chat_member(chat_id, user_id)
                name = user.user.mention_markdown()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
                name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"

            response.append(f"{idx}. {name} ‚Äî {count} —Ñ–æ—Ç–æ")

        await update.message.reply_text("\n".join(response), parse_mode="Markdown")

    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π")
        return PERIOD_REQUEST
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–∏–æ–¥–∞ –≤ —á–∞—Ç–µ {chat_id}: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    return ConversationHandler.END


def main():
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    application = ApplicationBuilder().token(token).concurrent_updates(True).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("top", show_top)],
        states={
            PERIOD_REQUEST: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_period)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.PHOTO, photo_handler))
    application.add_error_handler(lambda update, context: logger.error(context.error))

    application.run_polling()


if __name__ == "__main__":
    main()